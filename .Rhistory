#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
data <- read.csv("BranchSegments.csv", sep=',', head=T)
]
data <- read.csv("BranchSegments.csv", sep=',', head=T)
cherry_trees <- c(1,7,10,13,15)
apple_trees <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20)
spp <- data[data$species=="apple",]
for (j in 14:14){
ind <- spp[spp$tree==apple_trees[j],]
tree <- ind   #remove branch = 0 for cherries with tree<-ind[-1,]
n = tree$branch #branch ID
a = tree$parent #attachment ID (parent)
d = tree$diameter_mm #*1000 #diameter, convert as needed
l = tree$length_cm #*100 #length, ditto
m = tree$stem_m
s = 0
tree_config = data.frame(n=n,a=a,d=d,m=m,s=s) #define the tree
twg=stack(tree_config[,1:2]) #put node and attach together
twg=unique(twg$values,fromLast=T) #find unique numbers. Starting from the last effectively cuts out parent node numbers from the "node" side. Zero marks the differnce between node and attaches
cut=which(twg==0) #find the position of the zero
prnt=twg[(cut+1):length(twg)] #parents after the zero
twg=twg[1:(cut-1)] #Twigs before the zero
#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
data <- read.csv("BranchSegments.csv", sep=',', head=T)
cherry_trees <- c(1,7,10,13,15)
apple_trees <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20)
spp <- data[data$species=="apple",]
for (j in 15:15){
ind <- spp[spp$tree==apple_trees[j],]
tree <- ind   #remove branch = 0 for cherries with tree<-ind[-1,]
n = tree$branch #branch ID
a = tree$parent #attachment ID (parent)
d = tree$diameter_mm #*1000 #diameter, convert as needed
l = tree$length_cm #*100 #length, ditto
m = tree$stem_m
s = 0
tree_config = data.frame(n=n,a=a,d=d,m=m,s=s) #define the tree
twg=stack(tree_config[,1:2]) #put node and attach together
twg=unique(twg$values,fromLast=T) #find unique numbers. Starting from the last effectively cuts out parent node numbers from the "node" side. Zero marks the differnce between node and attaches
cut=which(twg==0) #find the position of the zero
prnt=twg[(cut+1):length(twg)] #parents after the zero
twg=twg[1:(cut-1)] #Twigs before the zero
#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
data <- read.csv("BranchSegments.csv", sep=',', head=T)
cherry_trees <- c(1,7,10,13,15)
apple_trees <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20)
spp <- data[data$species=="apple",]
for (j in 16:16){
ind <- spp[spp$tree==apple_trees[j],]
tree <- ind   #remove branch = 0 for cherries with tree<-ind[-1,]
n = tree$branch #branch ID
a = tree$parent #attachment ID (parent)
d = tree$diameter_mm #*1000 #diameter, convert as needed
l = tree$length_cm #*100 #length, ditto
m = tree$stem_m
s = 0
tree_config = data.frame(n=n,a=a,d=d,m=m,s=s) #define the tree
twg=stack(tree_config[,1:2]) #put node and attach together
twg=unique(twg$values,fromLast=T) #find unique numbers. Starting from the last effectively cuts out parent node numbers from the "node" side. Zero marks the differnce between node and attaches
cut=which(twg==0) #find the position of the zero
prnt=twg[(cut+1):length(twg)] #parents after the zero
twg=twg[1:(cut-1)] #Twigs before the zero
#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
data <- read.csv("BranchSegments.csv", sep=',', head=T)
cherry_trees <- c(1,7,10,13,15)
apple_trees <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20)
spp <- data[data$species=="apple",]
for (j in 17:17){
ind <- spp[spp$tree==apple_trees[j],]
tree <- ind   #remove branch = 0 for cherries with tree<-ind[-1,]
n = tree$branch #branch ID
a = tree$parent #attachment ID (parent)
d = tree$diameter_mm #*1000 #diameter, convert as needed
l = tree$length_cm #*100 #length, ditto
m = tree$stem_m
s = 0
tree_config = data.frame(n=n,a=a,d=d,m=m,s=s) #define the tree
twg=stack(tree_config[,1:2]) #put node and attach together
twg=unique(twg$values,fromLast=T) #find unique numbers. Starting from the last effectively cuts out parent node numbers from the "node" side. Zero marks the differnce between node and attaches
cut=which(twg==0) #find the position of the zero
prnt=twg[(cut+1):length(twg)] #parents after the zero
twg=twg[1:(cut-1)] #Twigs before the zero
#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
data <- read.csv("BranchSegments.csv", sep=',', head=T)
cherry_trees <- c(1,7,10,13,15)
apple_trees <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20)
spp <- data[data$species=="apple",]
for (j in 18:18){
ind <- spp[spp$tree==apple_trees[j],]
tree <- ind   #remove branch = 0 for cherries with tree<-ind[-1,]
n = tree$branch #branch ID
a = tree$parent #attachment ID (parent)
d = tree$diameter_mm #*1000 #diameter, convert as needed
l = tree$length_cm #*100 #length, ditto
m = tree$stem_m
s = 0
tree_config = data.frame(n=n,a=a,d=d,m=m,s=s) #define the tree
twg=stack(tree_config[,1:2]) #put node and attach together
twg=unique(twg$values,fromLast=T) #find unique numbers. Starting from the last effectively cuts out parent node numbers from the "node" side. Zero marks the differnce between node and attaches
cut=which(twg==0) #find the position of the zero
prnt=twg[(cut+1):length(twg)] #parents after the zero
twg=twg[1:(cut-1)] #Twigs before the zero
#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
data <- read.csv("BranchSegments.csv", sep=',', head=T)
cherry_trees <- c(1,7,10,13,15)
apple_trees <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20)
spp <- data[data$species=="apple",]
for (j in 19:19){
ind <- spp[spp$tree==apple_trees[j],]
tree <- ind   #remove branch = 0 for cherries with tree<-ind[-1,]
n = tree$branch #branch ID
a = tree$parent #attachment ID (parent)
d = tree$diameter_mm #*1000 #diameter, convert as needed
l = tree$length_cm #*100 #length, ditto
m = tree$stem_m
s = 0
tree_config = data.frame(n=n,a=a,d=d,m=m,s=s) #define the tree
twg=stack(tree_config[,1:2]) #put node and attach together
twg=unique(twg$values,fromLast=T) #find unique numbers. Starting from the last effectively cuts out parent node numbers from the "node" side. Zero marks the differnce between node and attaches
cut=which(twg==0) #find the position of the zero
prnt=twg[(cut+1):length(twg)] #parents after the zero
twg=twg[1:(cut-1)] #Twigs before the zero
#####assign ranks, 1 twig at a time#######
for(i in 1:length(twg)){
ma=twg[i] #mother
mai=which(tree_config$n==ma) #mother's index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #increase rank
while(ma>0){
ma=tree_config$a[mai] #find mother's mother (attachment)
mai=which(tree_config$n==ma) #new index
tree_config$s[mai]=tree_config$s[mai]+tree$stem_m[mai] #up the rank
}
}
if (exists('trees_out'))
trees_out = rbind(trees_out, tree_config)
else
trees_out <- tree_config
}
write.csv(trees_out, "Sum_mass.csv")
#Recursion attempt
get_rank <- function(start_node){
for (i in 1:length(start_node)){
daughters <- data[data$attach==start_node,]
rank = rank + length(daughters[,1])
if (length(daughters[,1])==0)
if (i == length(start_node))
return(rank)
else
return(rank + get_rank(daughters$node[i]))
}
}
get_rank_alt <- function(start_node){
for (i in length(node)){
new_nodes <- subset(data, attach==node[i], select=node)
nodes = c(node, c(new_nodes))
tier_nodes = c(tier_nodes, c(new_nodes))
}
if (length(tier_nodes)==0)
return (length(nodes))
else
return (get_rank_alt(c(tier_nodes)))
}
rank=1
tier_nodes=0
node=c(69)
rank = get_rank_alt(node)
#Twig order
orders <- vector(length = 2812)
for (i in 266:3077){
parent = data$attach[i]
orders[(i-265)] = data$order[parent]+1
}
branch <- read.csv("BranchSegments.csv", sep = ',', header = T)
spp <- branch[branch$species=="cherry",]
masses <- spp[spp$stem_m > 0,]
diameter_masses <- lm(log(masses$stem_m)~log(masses$diameter_mm))
summary(diameter_masses)
diameter_mass <- list()
colors <- heat.colors(8, alpha = 1)
ind <- masses[masses$tree==15,]
par(ps = 28, pch= 19)
plot(log(ind$diameter_mm), log(ind$stem_m), cex = 2, ylim = c(0,12), xlim = c(0,5.5),
col = colors[3], ylab = "log ( Stem Mass )", xlab = "log ( Diameter )")
#main = round(summary(diameter_masses)$r.squared, digits = 3), ps = 28, pch= 19)
legend('topleft', legend=expression(R^2 == 0.858), bty='n')
abline(summary(diameter_masses)$coef[1,1], summary(diameter_masses)$coef[2,1], lwd = 3, lty = 3)
abline(0, 2.667, lwd = 3, lty = 1)
cherry_trees <- c(1,10,13,7)
for (j in 1:4){
ind <- masses[masses$tree==cherry_trees[j],]
diameter_mass[[j]] <- lm(log(ind$stem_m)~log(ind$diameter_mm))
par(new = T)
points(log(ind$diameter_mm), log(ind$stem_m), cex = 2, col = colors[(3+j)])
}
spp <- branch[branch$species=="apple",]
masses <- spp[spp$stem_m > 0,]
diameter_masses <- lm(log(masses$stem_m)~log(masses$diameter_mm))
summary(diameter_masses)
diameter_mass <- list()
colors <- heat.colors(8, alpha = 1)
ind <- masses[masses$tree==20,]
par(ps = 28, pch= 19)
plot(log(ind$diameter_mm), log(ind$stem_m), cex = 2, ylim = c(0,12), xlim = c(0,5.5),
col = colors[3], ylab = "log ( Stem Mass )", xlab = "log ( Diameter )")
#main = round(summary(diameter_masses)$r.squared, digits = 3), ps = 28, pch= 19)
legend('topleft', legend=expression(R^2 == 0.573), bty='n')
abline(summary(diameter_masses)$coef[1,1], summary(diameter_masses)$coef[2,1], lwd = 3, lty = 3)
abline(0, 2.667, lwd = 3, lty = 1)
cherry_trees <- c(19,18,17,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1)
for (j in 1:18){
ind <- masses[masses$tree==cherry_trees[j],]
diameter_mass[[j]] <- lm(log(ind$stem_m)~log(ind$diameter_mm))
par(new = T)
points(log(ind$diameter_mm), log(ind$stem_m), cex = 2, col = colors[(3+j)])
}
masses <- branch[branch$stem_m > 0,]
diameter_masses <- lm(log(masses$stem_m)~log(masses$diameter_mm))
summary(diameter_masses)
